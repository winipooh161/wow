<?php

namespace App\Http\Controllers;

use App\Models\Quiz;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Http;

class QuizController extends Controller
{
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–≤–∏–∑–∞
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function submit(Request $request)
    {
        $validatedData = $request->validate([
            'room_type' => 'required|string',
            'area' => 'required|string',
            'style_type' => 'required|string',
            'repair_type' => 'nullable|string',
            'name' => 'required|string|max:255',
            'phone' => 'required|string|max:20',
            'email' => 'nullable|email|max:255',
            'comments' => 'nullable|string',
        ]);

        try {
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∫–≤–∏–∑
            $quiz = Quiz::create([
                'room_type' => $validatedData['room_type'],
                'area' => $validatedData['area'],
                'style_type' => $validatedData['style_type'],
                'repair_type' => $validatedData['repair_type'] ?? 'standard', // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                'name' => $validatedData['name'],
                'phone' => $validatedData['phone'],
                'email' => $validatedData['email'] ?? null,
                'comments' => $validatedData['comments'] ?? null,
            ]);

            // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram –±–æ—Ç
            $this->sendToTelegram($validatedData);

            // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
            Log::info('–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å –∫–≤–∏–∑–∞', $validatedData);

            return response()->json([
                'success' => true,
                'message' => '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!',
                'redirect' => route('thank-you')
            ]);
        } catch (\Exception $e) {
            Log::error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–≤–∏–∑–∞: ' . $e->getMessage());

            return response()->json([
                'success' => false,
                'message' => '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            ], 500);
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram –±–æ—Ç
     *
     * @param  array  $data
     * @return void
     */
    private function sendToTelegram($data)
    {
        $botToken = env('TELEGRAM_BOT_TOKEN', '7991914300:AAFiw_NF_EtjyEC-EX4FSx5vOAn-TFKHV7c');
        $chatId = env('TELEGRAM_CHAT_ID', '-4667626325');
        
        if (empty($botToken) || empty($chatId)) {
            Log::warning('–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram');
            return;
        }
        
        // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        $roomTypes = [
            'apartment' => '–ö–≤–∞—Ä—Ç–∏—Ä–∞',
            'house' => '–ß–∞—Å—Ç–Ω—ã–π –¥–æ–º',
            'office' => '–û—Ñ–∏—Å/–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ'
        ];
        
        $areas = [
            'small' => '–î–æ 50 –º¬≤',
            'medium' => '50-100 –º¬≤',
            'large' => '–ë–æ–ª–µ–µ 100 –º¬≤'
        ];
        
        $styleTypes = [
            'style1' => '–°—Ç–∏–ª—å 1',
            'style2' => '–°—Ç–∏–ª—å 2',
            'style3' => '–°—Ç–∏–ª—å 3',
            'other' => '–î—Ä—É–≥–æ–π —Å—Ç–∏–ª—å'
        ];
        
        $message = "üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞*\n\n";
        $message .= "üë§ *–ò–º—è*: " . $data['name'] . "\n";
        $message .= "üìû *–¢–µ–ª–µ—Ñ–æ–Ω*: " . $data['phone'] . "\n";
        
        if (!empty($data['email'])) {
            $message .= "‚úâÔ∏è *Email*: " . $data['email'] . "\n";
        }
        
        $message .= "üè† *–¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è*: " . ($roomTypes[$data['room_type']] ?? $data['room_type']) . "\n";
        $message .= "üìè *–ü–ª–æ—â–∞–¥—å*: " . ($areas[$data['area']] ?? $data['area']) . "\n";
        $message .= "üé® *–°—Ç–∏–ª—å –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞*: " . ($styleTypes[$data['style_type']] ?? $data['style_type']) . "\n";
        
        if (!empty($data['comments'])) {
            $message .= "üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π*: " . $data['comments'] . "\n";
        }
        
        $message .= "\nüìÖ *–î–∞—Ç–∞ –∑–∞—è–≤–∫–∏*: " . now()->format('d.m.Y H:i');
        
        try {
            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot API
            $response = Http::post("https://api.telegram.org/bot{$botToken}/sendMessage", [
                'chat_id' => $chatId,
                'text' => $message,
                'parse_mode' => 'Markdown'
            ]);
            
            if (!$response->successful()) {
                Log::error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: ' . $response->body());
            }
        } catch (\Exception $e) {
            Log::error('–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: ' . $e->getMessage());
        }
    }
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã "–°–ø–∞—Å–∏–±–æ"
     *
     * @return \Illuminate\Contracts\View\View
     */
    public function thankYou()
    {
        return view('thank-you');
    }
}
